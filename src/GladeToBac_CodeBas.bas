CONST AS STRING _
     OrdTobac = "tobac", _
       BasXml = "XML", _
       BasGui = "GUISTR", _
  tobac_C_sta = "' ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", _
  tobac_C_tre = "' -----------------------------------------------------------------------------", _
  tobac_C_end = "' vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", _
      GtkNew  = "    #DEFINE __USE_GTK3__ '", _
      BasI18N = "    textdomain(PROJ_NAME)", _
      BasName = "CONST PROJ_NAME = """, _
      BasYear = "CONST PROJ_YEAR = """, _
      BasAuth = "CONST PROJ_AUTH = """, _
      BasMail = "CONST PROJ_MAIL = """, _
      BasSite = "CONST PROJ_WEBS = """, _
      BasDesc = "CONST PROJ_DESC = """, _
      BasVers = "CONST PROJ_VERS = """, _
      BasLiz  = "CONST PROJ_LICE = """, _
      BasIncl = "    #INCLUDE """, _
      BasUnre = "    g_object_unref("
DIM SHARED AS STRING BasErr
       BasErr = "#ERROR " & PROJ_NAME & ": " & *__("insert code") & "!"

'/*
'*  writing code to file >n< in folder >p<
'*  Schreiben der code Zeilen in Datei >n< im Pfad >p<
'**********************************************************************/
SUB write_code(BYREF N AS STRING)
  WITH _UI_
    .Raus(*__("File") & " ")
    VAR fnr = FREEFILE
    IF 0 = .No(OPEN (N FOR OUTPUT AS #fnr), N) THEN
      PRINT #fnr, _OUT_;
      CLOSE #fnr
      .Raus(" >> " & *__("Written") & "!" & NL)' OK
    END IF
  END WITH
END SUB

'/*
'*  counting german Umlaute
'*  bestimmt die Anzahl der Umlaute im String
'**********************************************************************/
FUNCTION UmlAz(BYREF T AS STRING) AS INTEGER
  VAR z = ASC("ä"), n = 0
  FOR p AS INTEGER = 0 TO LEN(T) - 1
    IF T[p] = z THEN p += 1 : n += 1
  NEXT : RETURN n
END FUNCTION

'/*
'*  generating a comment line
'*  Erzeugt Kommentar-zeile (links- und rechtsbündug) !!!
'**********************************************************************/
FUNCTION tobac_zeile(BYREF L AS STRING, BYREF R AS STRING) AS STRING
  VAR ul = UmlAz(L), ur = UmlAz(R), n = 78
  IF LEN(L) - ul < n THEN n += ul + ur ELSE RETURN L & NL
  VAR s = RIGHT(SPACE(n) & R, n) : MID(s, 1, n) = L : RETURN s & " >" & NL
END FUNCTION

'/*
'*  generating start comments for all files
'*  Erzeugt Start-Kommentar für alle Dateien
'**********************************************************************/
SUB tobac_top(BYREF Te AS STRING, BYREF Td AS STRING)
  _OUT_  = tobac_C_sta & NL
  _OUT_ &= tobac_zeile("'< " & Te & " generated by utility", _
                       PROJ_NAME & " V" & PROJ_VERS)
  _OUT_ &= tobac_zeile("'< " & Td & " erzeugt von", "")
  _OUT_ &= tobac_zeile("'< Generated at / Generierung am", TIME_STAMP)
END SUB

'/*
'*  generating comments code for modules
'*  Erzeugt Kommentar-Quelltext für Module
'**********************************************************************/
SUB tobac_modul()
  WITH _UI_.Xml
    _OUT_ &= tobac_C_tre & NL
    _OUT_ &= tobac_zeile("'< Main/Haupt Program name: " & .Nam & SufBas, "")
    IF LEN(.Auth) THEN _OUT_ &= tobac_zeile("'< Author:  " & .Auth, "")
    IF LEN(.Mail) THEN _OUT_ &= tobac_zeile("'<  Email:  " & .Mail, "")
    IF LEN(.Site) THEN _OUT_ &= tobac_zeile("'<    WWW:  " & .Site, "")
    IF LEN(.Site) THEN _OUT_ &= tobac_zeile("'<    (C):  " & .PLiz, "")
  END WITH
END SUB

'/*
'*  generating code for defining the references
'*  Füllt Quelltext mit Definitionen fuer die Referenzen
'**********************************************************************/
FUNCTION codingTobacDef(BYREF W AS STRING, BYREF T AS STRING) AS INTEGER
  WITH _UI_.Xml
    VAR fl = STACK_ANZ(SADD(.Ref)) + LEN(.WiMa)
    IF LEN(.TyNa) THEN '                         declare PTR for Widgets
      _OUT_ &= "TYPE " & .TyNa & "Data" & NL
      _OUT_ &= "  AS " & T & " PTR " & BasXml & NL
      IF fl THEN _OUT_ &= "  AS " & W & " PTR _" & NL
    ELSE
      _OUT_ &= "DIM SHARED AS " & T & " PTR " & BasXml & NL
      IF fl THEN _OUT_ &= "DIM SHARED AS " & W & " PTR _" & NL
    END IF

    IF fl THEN '                                        add widget names
      VAR zeile = "  "
      IF LEN(.WiMa) THEN zeile &= .WiMa & ", "
      VAR a = 6, e = INSTR(a, .Ref, CHR(1))
      WHILE e > a
        IF LEN(zeile) > 70 THEN _OUT_ &= zeile & " _" & NL : zeile = "  "
        zeile &= MID(.Ref, a, e - a) & ", "
        a = e + 1 : e = INSTR(a, .Ref, CHR(1))
      WEND
      _OUT_ &= RTRIM(zeile, ", ") & NL
    END IF

    IF LEN(.TyNa) THEN '                          close TYPE def, if any
      _OUT_ &= "END TYPE" & NL
      _OUT_ &= "DIM SHARED AS " & .TyNa & "Data " & .TyNa & NL
    END IF : _OUT_ &= NL : RETURN fl
  END WITH
END FUNCTION

'/*
'*  generating code for reference PTRs
'*  Füllt Quelltext mit den PTR Referenzen
'**********************************************************************/
SUB codingTobacRef()
  WITH _UI_.Xml
    DIM AS STRING o, func
    IF .Suf = SufUi THEN
      func = "gtk_builder_get_object("
    ELSE
      func = "glade_xml_get_widget("
    END IF
    IF LEN(.TyNa) THEN
      o = "  ."
      func += "."
      _OUT_ &= "WITH " & .TyNa & NL
    END IF

    IF LEN(.WiMa) THEN
      _OUT_ &= o & .WiMa + " = " & func & BasXml &", """ & _
                   .WiMa + """)" & NL
    END IF

    VAR a = 6, e = INSTR(a, .Ref, CHR(1))
    WHILE e > a
      _OUT_ &= o & MID(.Ref, a, e - a) + " = " & func & BasXml &", """ & _
                   MID(.Ref, a, e - a) + """)" & NL
      a = e + 1 : e = INSTR(a, .Ref, CHR(1))
    WEND
    IF LEN(.TyNa) THEN _OUT_ &= "END WITH" & NL
  END WITH
END SUB

'/*
'*  translates double quotes (") into FreeBasic syntax, shortens long lines
'*  wandelt Anfuehrungsz. in FreeBasic-Syntax, bricht ggf. lange Zeile um
'*  (Fb doesn't like long lines > 240 characters)
'**********************************************************************/
FUNCTION codingGui(BYREF Z AS STRING) AS STRING ' Anführungszeichen verdoppeln
  DIM AS INTEGER p = INSTR(Z, CHR(34))
  WHILE p
    Z = MID(Z, 1, p) & CHR(34) & MID(Z, p + 1)
    p = INSTR(p + 2, Z, CHR(34))
  WEND : p = 240
  WHILE p < LEN(Z)
    Z = MID(Z, 1, p) & """& _" & NL & """" & MID(Z, p + 1)
    p += 240 : WHILE ASC(Z, p) = ASC("""") : p -= 1 : WEND
  WEND : RETURN Z
END FUNCTION

'/*
'*  generate code of GUI-XML-file
'*  generiert Code-Zeilen der GUI-XML-Datei
'**********************************************************************/
FUNCTION GuiCode(BYREF Vn AS STRING) AS STRING
  VAR r = "VAR " & Vn & " = SADD( _" & NL
  WITH _UI_.Xml
    VAR f = .Path & SLASH & .Nam & .Suf, zeile = "", fnr = FREEFILE
    _UI_.Raus(*__("File") & " ")
    IF 0 = _UI_.No(OPEN(f FOR INPUT AS #fnr), f) THEN
      VAR ende = IIF(.Suf = SufUi, @"", @" & CHR(0)")
      WHILE NOT EOF(fnr)
        LINE INPUT #fnr, zeile
        VAR t = codingGui(LTRIM(zeile))
        IF RIGHT(t, 1) = ">" THEN r &= """" & t & """" ELSE r &= "!""" & t & "\n"""
        r &= " _" & NL
      WEND : CLOSE #fnr
      r &= "!""\0"")"
      _UI_.Raus(" >> " & *__("Read") & "!" & NL)' OK
    END IF
  END WITH : RETURN r
END FUNCTION

'/*
'*  generating code for GTKBuilder in tobac modul
'*  Füllt Quelltext für die Verwendung von GTKBuilder im tobac-Modul
'**********************************************************************/
SUB codingBuilder()
  VAR fl = codingTobacDef("GObject", "GtkBuilder")
  VAR x = BasXml, y = BasGui
  WITH _UI_.Xml
    IF LEN(.TyNa) THEN x = .TyNa & "." & x
    _OUT_ &= x & " = gtk_builder_new()" & NL & NL
    _OUT_ &= "SCOPE" & NL
    _OUT_ &= "DIM AS GError PTR meld" & NL
    IF .UiIn THEN
      _OUT_ &= GuiCode(y) & NL
      _OUT_ &= "IF 0 = gtk_builder_add_from_string(" & x & ", " & y & ", -1, @meld) THEN" & NL
    ELSE
      _OUT_ &= "IF 0 = gtk_builder_add_from_file(" & x & ", """ & _
                .Nam & SufUi & """, @meld) THEN" & NL
    END IF
  END WITH
  _OUT_ &= "  WITH *meld" & NL
  _OUT_ &= "    ?""Fehler/Error (GTK-Builder):""" & NL
  _OUT_ &= "    ?*.message" & NL
  _OUT_ &= "  END WITH" & NL
  _OUT_ &= "  g_error_free(meld)" & NL
  _OUT_ &= "  END 2" & NL
  _OUT_ &= "END IF" & NL
  _OUT_ &= "END SCOPE" & NL & NL
  IF fl THEN codingTobacRef()
END SUB

'/*
'*  generating code for Glade in tobac modul
'*  Füllt Quelltext für die Verwendung von Glade im tobac-Modul
'**********************************************************************/
SUB codingGlade()
  WITH _UI_.Xml
    _OUT_ &= "EXTERN ""C"" LIB ""glade-2.0""" & NL & NL
    _OUT_ &= "TYPE GladeXML AS _GladeXML" & NL
    _OUT_ &= "TYPE GladeXMLPrivate AS _GladeXMLPrivate" & NL & NL
    _OUT_ &= "TYPE _GladeXML" & NL
    _OUT_ &= "  parent AS GObject" & NL
    _OUT_ &= "  filename AS ZSTRING PTR" & NL
    _OUT_ &= "  priv AS GladeXMLPrivate PTR" & NL
    _OUT_ &= "END TYPE" & NL & NL
    IF .UiIn THEN
      _OUT_ &= "DECLARE FUNCTION glade_xml_new_from_buffer CDECL(BYVAL AS ZSTRING PTR, BYVAL AS INTEGER, BYVAL AS ZSTRING PTR, BYVAL AS ZSTRING PTR) AS GladeXML PTR" & NL
    ELSE
      _OUT_ &= "DECLARE FUNCTION glade_xml_new CDECL(BYVAL AS ZSTRING PTR, BYVAL AS ZSTRING PTR, BYVAL AS ZSTRING PTR) AS GladeXML PTR" & NL
    END IF
    _OUT_ &= "DECLARE FUNCTION glade_xml_get_widget CDECL(BYVAL AS GladeXML PTR, BYVAL AS ZSTRING PTR) AS GtkWidget PTR" & NL
    _OUT_ &= "DECLARE SUB glade_xml_signal_autoconnect CDECL(BYVAL AS GladeXML PTR)" & NL & NL
    _OUT_ &= "END EXTERN" & NL & NL

    VAR fl = codingTobacDef("GtkWidget", "GladeXML")
    DIM AS STRING x = BasXml, y = BasGui
    IF LEN(.TyNa) THEN x = .TyNa & "." & x
    IF .UiIn THEN
      _OUT_ &= "SCOPE" & NL
      _OUT_ &= GuiCode(y) & NL
      _OUT_ &= x & " = glade_xml_new_from_buffer(" & y & ", LEN(*" & y & "), 0, 0)" & NL
      _OUT_ &= "END SCOPE" & NL
    ELSE
      _OUT_ &= x & " = glade_xml_new(""" & .Nam & SufGla & """, 0, 0)" & NL
    END IF : _OUT_ &= NL
    IF fl THEN codingTobacRef()
  END WITH
END SUB

FUNCTION codingTobacIncl(BYREF S AS STRING, BYVAL Z AS ZSTRING PTR) AS LONG
  _OUT_ &= "#INCLUDE """ & S & SufBas & """" & NL
  RETURN FALSE
END FUNCTION

'/*
'*  generating code for tobac modul
'*  Füllt Quelltext für das tobac-Modul
'**********************************************************************/
SUB TobacCode()
  tobac_top("_tobac.bas modul","Modul _tobac.bas")
  tobac_modul()
  _OUT_ &= tobac_C_tre & NL
  _OUT_ &= tobac_zeile("'< declare names, signal handlers, load GUI-XML", "do not edit!")
  _OUT_ &= tobac_zeile("'< deklariert Namen, Signale, laedt GUI-XML", "nicht veraendern!")
  _OUT_ &= tobac_C_end & NL & NL

  WITH _UI_.Xml
    IF LEN(.GVer) THEN
      _OUT_ &= "SCOPE" & NL
      _OUT_ &= "  VAR er = gtk_check_version_(" & .GtkVersStr(.GVer, ", ", 3) & ")" & NL
      _OUT_ &= "  IF er THEN" & NL
      _OUT_ &= "    ?""Fehler/Error (GTK-Version):""" & NL
      _OUT_ &= "    ?*er" & NL
      _OUT_ &= "    END 1" & NL
      _OUT_ &= "  END IF" & NL
      _OUT_ &= "END SCOPE" & NL & NL
    END IF

    IF .Suf = SufUi THEN codingBuilder() ELSE codingGlade()
    _OUT_ &= NL

    .Han->ForEach(@codingTobacIncl)
    _OUT_ &= NL

    write_code(.Nam & SufTobac)
  END WITH
END SUB

'/*
'*  inserts the .desc file into output
'*  Fuegt in die Code-Zeilen die Beschreibung .desc ein
'**********************************************************************/
SUB DescriptionCode(BYREF Bor AS STRING)
  WITH _UI_.Xml
    VAR n = .Path & SLASH & .Nam & SufDes, o = LTRIM(Bor)
    IF NOT FILEEXISTS(n) THEN EXIT SUB
    DIM AS INTEGER fnr = FREEFILE
    IF _UI_.No(OPEN(n FOR INPUT AS #fnr), n) THEN EXIT SUB
    WHILE NOT EOF(fnr)
      LINE INPUT #fnr, n
      IF ASC(o) = ASC("'") THEN ' comment / Kommentar
        _OUT_ &= tobac_zeile(Bor & n, "")
      ELSE
        IF LEN(n) THEN _OUT_ &= Bor & n
        _OUT_ &= NL
      END IF
    WEND : CLOSE #fnr
  END WITH
END SUB

'/*
'*  inserts a license file into output
'*  Fuegt in die Code-Zeilen eine Lizenz
'**********************************************************************/
SUB LizenseCode(BYREF Bor AS STRING)
  WITH _UI_.Xml
    IF .PLiz = "" THEN
      _OUT_ &= Bor & "Put your license here/Lizenz hier einfuegen." & NL
      EXIT SUB
    END IF
    _UI_.Raus(*__("File") & " ")
    VAR n = _UI_.OrdData & SLASH & MID(*_UI_.Liz.Rep(.PLiz), 5)
    VAR fnr = FREEFILE
    IF _UI_.No(OPEN(n FOR INPUT AS #fnr), n) THEN EXIT SUB
    IF EOF(fnr) THEN
      _UI_.RausRot(NL & *__("Empty file") & ": " & n & NL)
    ELSE
      LINE INPUT #fnr, n '                        get the license's name
      VAR o = LTRIM(Bor)
      WHILE NOT EOF(fnr)
        LINE INPUT #fnr, n
        IF ASC(o) = ASC("'") THEN '                  comment / Kommentar
          _OUT_ &= tobac_zeile(Bor & n, "")
        ELSE
          IF LEN(n) THEN _OUT_ &= Bor & n
          _OUT_ &= NL
        END IF
      WEND
    END IF : CLOSE #fnr
    _UI_.Raus(" >> " & *__("Read") & "!" & NL)
  END WITH
END SUB

'/*
'*  generating code for .bas program shell
'*  Erzeugt Quelltext für den .bas-Quelltextrahmen
'**********************************************************************/
SUB BasCode()
  tobac_top("main program","Hauptprogramm")
  WITH _UI_.Xml
    _OUT_ &= tobac_C_tre & NL
    _OUT_ &= tobac_zeile("'< Program info:", "")
    _OUT_ &= tobac_zeile(BasName & .Nam & """ '", "")
    _OUT_ &= tobac_zeile(BasDesc & .Desc & """ '", "")
    _OUT_ &= tobac_zeile(BasVers & .Vers & """ '", "")
    _OUT_ &= tobac_zeile(BasYear & .Jahr & """ '", "")
    _OUT_ &= tobac_zeile(BasAuth & .Auth & """ '", "")
    _OUT_ &= tobac_zeile(BasMail & .Mail & """ '", "")
    _OUT_ &= tobac_zeile(BasSite & .Site & """ '", "")
    _OUT_ &= tobac_zeile( BasLiz & .PLiz & """ '", "")
    _OUT_ &= tobac_zeile("'<", "")
    _OUT_ &= tobac_zeile("'< Description / Beschreibung:", "")
    _OUT_ &= tobac_zeile("'<", "")
    DescriptionCode     ("'< ")
    _OUT_ &= tobac_zeile("'<", "")
    _OUT_ &= tobac_zeile("'< License / Lizenz:", "")
    _OUT_ &= tobac_zeile("'<", "")
    LizenseCode         ("'< ")
    _OUT_ &= tobac_zeile("'<", "")
    _OUT_ &= tobac_C_tre & NL
    _OUT_ &= tobac_zeile("'< Please prefer GNU GENERAL PUBLIC LICENSE to support open software.", "")
    _OUT_ &= tobac_zeile("'< For more information please visit:", "http://www.fsf.org")
    _OUT_ &= tobac_zeile("'<", "")
    _OUT_ &= tobac_zeile("'< Bitte bevorzugen Sie die GNU GENERAL PUBLIC LICENSE und", "")
    _OUT_ &= tobac_zeile("'< unterstuetzen Sie mit Ihrem Programm die freie Software", "")
    _OUT_ &= tobac_zeile("'< Mehr Informationen finden Sie unter:", "http://www.fsf.org")
    _OUT_ &= tobac_C_tre & NL
    _OUT_ &= tobac_zeile("'<  " & PROJ_NAME & ":", "general init / Allgemeine Initialisierungen")
    IF .GtkVers(.GVer) >= .GtkVers("3.0") THEN
      _OUT_ &= tobac_zeile(GtkNew, "GTK-3 / GTK-3 Bibliothek")
    END IF
    _OUT_ &= tobac_zeile("    #INCLUDE ONCE ""gtk/gtk.bi"" '", "GTK+library / GTK+ Bibliothek")
    _OUT_ &= tobac_zeile("    gtk_init(@__FB_ARGC__, @__FB_ARGV__) '", "start GKT / GTK starten")
    IF .I18N THEN
      _OUT_ &= tobac_zeile("    #INCLUDE ONCE ""libintl.bi"" '", "load lib / Lib laden")
      _OUT_ &= tobac_zeile("    bindtextdomain(PROJ_NAME, EXEPATH & ""/locale"") '", "path / Pfad")
      _OUT_ &= tobac_zeile("    bind_textdomain_codeset(PROJ_NAME, ""UTF-8"") '", "set encoding / Zeichensatz")
      _OUT_ &= tobac_zeile(BasI18N & " '", "Filename / Dateiname")
    END IF
    _OUT_ &= tobac_zeile("'<  " & PROJ_NAME & ":", "end block / Blockende")
    _OUT_ &= tobac_C_end & NL
    _OUT_ &= NL & NL
    _OUT_ &= "' place your source code here / eigenen Quelltext hier einfuegen" & NL
    _OUT_ &= BasErr & NL
    _OUT_ &= NL & NL
    _OUT_ &= tobac_C_sta & NL
    _OUT_ &= tobac_zeile("'<  " & PROJ_NAME & ":", "load GTK stuff / GTK Anbindung")
    DIM AS STRING nam, tob = .Nam & SufTobac
    IF .Toba THEN tob = OrdTobac & SLASH & tob
    _OUT_ &= tobac_zeile(BasIncl & tob & """ '", "Signale & GUI-XML")
    _OUT_ &= tobac_zeile("'<  " & PROJ_NAME & ":", "end block / Blockende")
    _OUT_ &= tobac_C_end & NL
    _OUT_ &= NL & NL
    _OUT_ &= "' here widgets are known, place your source code here" & NL
    _OUT_ &= "' hier sind die Widgets bekannt, eigenen Quelltext einfuegen" & NL
    _OUT_ &= BasErr & NL
    _OUT_ &= NL & NL
    _OUT_ &= tobac_C_sta & NL
    _OUT_ &= tobac_zeile("'<  " & PROJ_NAME & ":", "run GTK main, then end / GTK Hauptschleife, dann Ende")
    IF LEN(.TyNa) THEN
      tob = .TyNa & "." & BasXml
      nam = .TyNa & "." & .WiMa
    ELSE
      tob = BasXml
      nam = .WiMa
    END IF
    IF .Suf <> SufUi THEN
      _OUT_ &= tobac_zeile("    glade_xml_signal_autoconnect(" & tob & ") '", "Signale anbinden")
    ELSE
      _OUT_ &= tobac_zeile("    gtk_builder_connect_signals(" & tob & ", 0) '", "Signale anbinden")
      nam = "GTK_WIDGET(" & nam & ")"
    END IF
    _OUT_ &= tobac_zeile("    g_object_unref(" & tob & ") '", "dereference / Referenz abbauen")
    IF LEN(.WiMa) THEN
      _OUT_ &= tobac_zeile("    gtk_widget_show_all(" & nam & ") '", "Hauptfenster darstellen")
    END IF
    _OUT_ &= tobac_zeile("    gtk_main() '", "main loop / Hauptschleife")
    _OUT_ &= tobac_zeile("'<  " & PROJ_NAME & ":", "end block / Blockende")
    _OUT_ &= tobac_C_end & NL
    _OUT_ &= NL & NL
    _OUT_ &= "' you may free memory and close files here " & NL
    _OUT_ &= "' ggf. hier Speicher freigeben und Dateien schliessen" & NL & NL
    write_code(.Nam & SufBas)
  END WITH
END SUB

'/*
'*  generating code for signal handler
'*  Füllt die Code-Zeilen für ein Signal-Modul
'**********************************************************************/
SUB HandlerCode(BYREF N AS STRING)
  tobac_top("Signal handler", "Signal-Modul")
  tobac_modul()
  _OUT_ &= tobac_C_tre & NL
  _OUT_ &= tobac_zeile("'< callback SUB/FUNCTION", "insert code!")
  _OUT_ &= tobac_zeile("'< Ereignis Unterprogramm/Funktion", "Quelltext einfuegen!")
  _OUT_ &= tobac_C_end & NL
  _OUT_ &= _UI_.Sig->GenHandler(N)
  write_code(N & SufBas)
END SUB


